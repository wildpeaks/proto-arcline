#VRML V2.0 utf8

PROTO ArcLine [
	exposedField  SFFloat  fromAngle    0
	exposedField  SFFloat  toAngle      6.28318
	exposedField  SFFloat  radius       1
	exposedField  SFFloat  tesselation  16
	exposedField  SFBool   beginCap     TRUE
	exposedField  SFBool   endCap       TRUE
]{
	DEF geometry IndexedLineSet {
		coord DEF coords Coordinate {}
	}

	Script {
		field         SFNode   geometry     USE geometry
		field         SFNode   coords       USE coords

		exposedField  SFFloat  fromAngle    IS fromAngle
		exposedField  SFFloat  toAngle      IS toAngle
		exposedField  SFFloat  radius       IS radius
		exposedField  SFFloat  tesselation  IS tesselation
		exposedField  SFBool   beginCap     IS beginCap
		exposedField  SFBool   endCap       IS endCap

		directOutput TRUE
		url "javascript:

		function refresh(){
			var positions = new MFVec3f();
			var coordIndex = new MFInt32();
			if (tesselation > 1){
				var minValue = fromAngle;
				var maxValue = toAngle;
				var delta = maxValue - minValue;
				if (delta != 0){
					var angle = minValue;
					var angleBetween = delta / tesselation;
					for (var i = 0; i < tesselation + 1; i++){
						positions[i] = new SFVec3f(-radius * Math.sin(angle), radius * Math.cos(angle), 0);
						angle += angleBetween;
						coordIndex[i] = i;
					}
					coordIndex[tesselation + 1] = -1;
				}
				if (beginCap || endCap){
					var originIndex = positions.length;
					positions[originIndex] = new SFVec3f();
					if (beginCap){
						coordIndex[coordIndex.length] = originIndex;
						coordIndex[coordIndex.length] = 0;
						coordIndex[coordIndex.length] = -1;
					}
					if (endCap){
						coordIndex[coordIndex.length] = originIndex;
						coordIndex[coordIndex.length] = originIndex - 1;
						coordIndex[coordIndex.length] = -1;
					}
				}
			}
			coords.point = positions;
			geometry.coordIndex = coordIndex;
		}

		function fromAngle(){}
		function toAngle(){}
		function radius(){}
		function tesselation(){}
		function beginCap(){}
		function endCap(){}
		function initialize(){
			refresh();
		}
		function eventsProcessed(){
			refresh();
		}

		"
	}
}
